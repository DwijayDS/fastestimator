# Copyright 2019 The FastEstimator Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
import tensorflow as tf
import torch

import fastestimator as fe
from fastestimator.backend import roll
from fastestimator.op.tensorop.loss import LossOp


class MixUpLoss(LossOp):
    """This class should be used in conjunction with MixUpBatch and CutMixBatch to perform mix-up training, which helps to reduce
    over-fitting, stabilize GAN training, and harden against adversarial attacks (https://arxiv.org/abs/1710.09412)
    Args:
        loss (func): A loss object which can be invoked like "loss(true, pred)". It's reduction method will be
        overridden to 'none'
        lam: The key of the lambda value generated by MixUpBatch
    """
    def __init__(self, loss: LossOp, lam: str, average_loss: bool = True):
        self.loss = loss
        self.loss.average_loss = False
        if len(loss.outputs) == 1:
            loss.outputs = loss.outputs[0]
        super().__init__(inputs=[lam] + loss.inputs, outputs=loss.outputs, mode=loss.mode, average_loss=average_loss)

    def forward(self, data, state):
        lam, *data = data

        loss1 = self.loss.forward(data, state)

        data[self.loss.true_key_idx] = roll(data[self.loss.true_key_idx], shift=1, axis=0)
        loss2 = self.loss.forward(data, state)

        loss = lam * loss1 + (1.0 - lam) * loss2
        if self.average_loss:
            return fe.backend.reduce_mean(loss)
        else:
            return loss
